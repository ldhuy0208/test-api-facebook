{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onChange","e","setState","message","target","value","onSubmit","a","preventDefault","params","state","access_token","console","log","Axios","post","res","alert","className","this","placeholder","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","name","click","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"sUAsDeA,E,kDAjDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,SAAW,SAACC,GACV,EAAKC,SAAS,CAAEC,QAASF,EAAEG,OAAOC,SATjB,EAYnBC,SAZmB,uCAYR,WAAOL,GAAP,iBAAAM,EAAA,6DACTN,EAAEO,iBAEIC,EAAS,CACbN,QAAS,EAAKO,MAAMP,QACpBQ,aACE,sMAGJC,QAAQC,IAAIJ,GATH,kBAYWK,IAAMC,KACtB,oDACAN,GAdK,OAYDO,EAZC,OAgBPJ,QAAQC,IAAIG,GACZC,MAAM,oBAjBC,kDAmBPL,QAAQC,IAAI,YACZI,MAAM,EAAD,IApBE,0DAZQ,sDAGjB,EAAKP,MAAQ,CACXP,QAAS,IAJM,E,qDAoCjB,OACE,yBAAKe,UAAU,aACb,8DACA,0BAAMZ,SAAUa,KAAKb,UACnB,8BAAUc,YAAY,2CAAyBf,MAAOc,KAAKT,MAAMP,QAASH,SAAUmB,KAAKnB,WACzF,0DAEF,uBAAGqB,KAAK,iDAAiDjB,OAAO,UAAhE,4B,GA5CUkB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,CAAKC,KAAK,MAAMC,MAHhC,WACEpB,QAAQC,IAAI,UAEmCoB,SAASC,eAAe,SD2HnE,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMvC,c","file":"static/js/main.73b5ea5b.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport \"./App.css\";\nimport Axios from \"axios\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: \"\",\n    };\n  }\n\n  onChange = (e) => {\n    this.setState({ message: e.target.value });\n  };\n\n  onSubmit = async (e) => {\n    e.preventDefault();\n\n    const params = {\n      message: this.state.message,\n      access_token:\n        \"EAAH8ll3xGecBAJ9umr2Uz4RwjnHjSo7fpleeg8hiILUqIZBoqg7DOUsiznq2DP6HvJ0eDRxBuPSTAkbZByMNocmmbXv1TQoqodCDJB5Q6FaiHesHymperFFpRSCnfUKkCG3mG0lLS0pXhxwsUbM0mq5dQkw1DZBXrJubWYPeT52ZATDMu2b1IXPGEaBEkkwZD\",\n    };\n\n    console.log(params);\n\n    try {\n      const res = await Axios.post(\n        \"https://graph.facebook.com/1213620598825676/feed?\",\n        params\n      );\n      console.log(res);\n      alert(\"Thành công\");\n    } catch (error) {\n      console.log(\"Lỗi\");\n      alert(error);\n    }\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Đăng bài facebook</h1>\n        <form onSubmit={this.onSubmit}>\n          <textarea placeholder=\"Nhập nội dung bài viết\" value={this.state.message} onChange={this.onChange} />\n          <button>Đăng bài</button>\n        </form>\n        <a href=\"https://www.facebook.com/XiXi-1213620598825676\" target=\"_blank\">Link trang facebook</a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nfunction click(){\n  console.log(12321);\n}\nReactDOM.render(<App name='huy' click={click}/>, document.getElementById(\"root\")); \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}